// Copyright Sydney Fonderie, 2023. All Rights Reserved.

#pragma once

#include "CoreMinimal.h"
#include "TileGen/TileGenParams.h"

class FTileGenWorker;

struct FTileGraphPlan;
struct FPrimaryAssetId;
struct FStreamableHandle;

/** Asynchronous generation action. */
class IOTATILE_API FTileGenAction
{

public:

	/**
	 * Asynchronously generates a new tile map from the provided parameters, invoking the given
	 * delegate once generation is complete.
	 *
	 * @param InParams Tile map generation parameters.
	 * @param InDelegate
	 */
	FTileGenAction(const FTileGenParams& InParams, const FSimpleDelegate& InDelegate);

	/** Ensures that the Asset Manager releases requested assets. */
	~FTileGenAction();

	/**
	 * Restarts the asynchronous worker and generates another tile map. All parameters will remain
	 * constant in the new map except for the seed, which will use the last number mutated for the
	 * previous map as its new value. When the new map is complete, the completion delegate will
	 * fire again.
	 *
	 * Note that this method will not execute if the previous generation cycle is incomplete.
	 */
	void Regenerate();

	/**
	 * Checks to see if the asynchronous worker is finished generating the tile map. This method
	 * will always return true if the action's completion delegate has fired.
	 *
	 * @return True if it is safe to access the tile map.
	 */
	bool CanAccess() const;

	/**
	 * Checks to see if the tile map generated by the asynchronous worker is complete - that is,
	 * the map contains the complete tile sequence specified by the parameters. If the worker is
	 * still inaccessible, this method will return false.
	 *
	 * @return True if the map contains a complete core tile sequence.
	 */
	bool IsMapValid() const;

	/**
	 * Provides a pointer to the array of tile plans produced by the asynchronous worker. If the
	 * worker has not finished generating a tile map, a null pointer will be returned instead.
	 *
	 * @return Pointer to the generated tile map array, if one exists.
	 */
	const TArray<FTileGraphPlan>* GetTileMap() const;

public:

	/** Action generation parameters. */
	const FTileGenParams Params;

private:

	/** Invoked by the engine when it has loaded the tile data assets that the action requested. */
	void NotifyAssetsLoaded();

private:

	/** Delegate invoked when the generation action completes. */
	FSimpleDelegate OnComplete;

	/** Tile data assets requested by the action. */
	TArray<FPrimaryAssetId> TileAssetList;

	/** Handle used to track data asset loading. */
	TSharedPtr<FStreamableHandle> DataAssetHandle;

	/** Asynchronous worker dispatched by the action. */
	TSharedPtr<FTileGenWorker> AsyncWorker;
};
